## This file reads content and style images and also creates hyperparameters for Adam optimizer#

# default arguments
CONTENT_WEIGHT = 5e0
CONTENT_WEIGHT_BLEND = 1
STYLE_WEIGHT = 5e2
TV_WEIGHT = 1e2
STYLE_LAYER_WEIGHT_EXP = 1
LEARNING_RATE = 1e1
BETA1 = 0.9
BETA2 = 0.999
EPSILON = 1e-08
STYLE_SCALE = 1.0
ITERATIONS = 1000
VGG_PATH = 'imagenet-vgg-verydeep-19.mat'
POOLING = 'avg'

def imread(path):
    img = scipy.misc.imread(path).astype(np.float)
    if len(img.shape) == 2:
        # grayscale
        img = np.dstack((img, img, img))
    elif img.shape[2] == 4:
        # PNG with alpha channel
        img = img[:, :, :3]
    return img


def imsave(path, img):
    img = np.clip(img, 0, 255).astype(np.uint8)
    Image.fromarray(img).save(path, quality=95)

def get_default_hyperparameters_for_adam():
    '''
    return beta1,beta2,....
    :return:
    '''

def prepare_inputs_for_style_transfer():

    '''

    returns all data needed for style_transfer(stylize)
    :return:
    '''

    ## added code for reference => this function should return all parameters for the main stylize function.
    # key = 'TF_CPP_MIN_LOG_LEVEL'
    # if key not in os.environ:
    #     os.environ[key] = '2'
    #
    # parser = build_parser()
    # options = parser.parse_args()
    #
    # if not os.path.isfile(options.network):
    #     parser.error("Network %s does not exist. (Did you forget to "
    #                  "download it?)" % options.network)
    #
    # if [options.checkpoint_iterations,
    #     options.checkpoint_output].count(None) == 1:
    #     parser.error("use either both of checkpoint_output and "
    #                  "checkpoint_iterations or neither")
    #
    # if options.checkpoint_output is not None:
    #     if re.match(r'^.*(\{.*\}|%.*).*$', options.checkpoint_output) is None:
    #         parser.error("To save intermediate images, the checkpoint_output "
    #                      "parameter must contain placeholders (e.g. "
    #                      "`foo_{}.jpg` or `foo_%d.jpg`")
    #
    # content_image = imread(options.content)
    # style_images = [imread(style) for style in options.styles]
    #
    # width = options.width
    # if width is not None:
    #     new_shape = (int(math.floor(float(content_image.shape[0]) /
    #                                 content_image.shape[1] * width)), width)
    #     content_image = scipy.misc.imresize(content_image, new_shape)
    # target_shape = content_image.shape
    # for i in range(len(style_images)):
    #     style_scale = STYLE_SCALE
    #     if options.style_scales is not None:
    #         style_scale = options.style_scales[i]
    #     style_images[i] = scipy.misc.imresize(style_images[i], style_scale *
    #                                           target_shape[1] / style_images[i].shape[1])
    #
    # style_blend_weights = options.style_blend_weights
    # if style_blend_weights is None:
    #     # default is equal weights
    #     style_blend_weights = [1.0 / len(style_images) for _ in style_images]
    # else:
    #     total_blend_weight = sum(style_blend_weights)
    #     style_blend_weights = [weight / total_blend_weight
    #                            for weight in style_blend_weights]
    #
    # initial = options.initial
    # if initial is not None:
    #     initial = scipy.misc.imresize(imread(initial), content_image.shape[:2])
    #     # Initial guess is specified, but not noiseblend - no noise should be blended
    #     if options.initial_noiseblend is None:
    #         options.initial_noiseblend = 0.0
    # else:
    #     # Neither inital, nor noiseblend is provided, falling back to random
    #     # generated initial guess
    #     if options.initial_noiseblend is None:
    #         options.initial_noiseblend = 1.0
    #     if options.initial_noiseblend < 1.0:
    #         initial = content_image
    #
    # # try saving a dummy image to the output path to make sure that it's writable
    # if os.path.isfile(options.output) and not options.overwrite:
    #     raise IOError("%s already exists, will not replace it without "
    #                   "the '--overwrite' flag" % options.output)
    # try:
    #     imsave(options.output, np.zeros((500, 500, 3)))
    # except:
    #     raise IOError('%s is not writable or does not have a valid file '
    #                   'extension for an image file' % options.output)



